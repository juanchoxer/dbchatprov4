@page "/connect-db"

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using DBChatPro.Models
@using Microsoft.Data.SqlClient

@inject IDatabaseService dataService
@inject IConnectionService connectionService

<div Class="ma-4">
    <h1>Conexiones a Bases de Datos</h1>
    <MudDivider />
    <EditForm Model="@aiConnection" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid Class="mt-6">
            <MudItem xs="12" md="6">
                <h2 Class="mb-6">Agregar una conexión</h2>
                <div>
                    <p>Proporcione una Connection String a continuación para conectarse a una base de datos y extraer el esquema. La IA utiliza el esquema para generar consultas para su base de datos.</p>
                    <MudAlert Class="my-6" Severity="Severity.Info">El servicio de IA NO tiene acceso a la base de datos ni a los registros de datos: solo conoce el esquema.</MudAlert>
                    @if (!string.IsNullOrEmpty(Error))
                    {
                        <MudAlert Class="my-6" Severity="Severity.Error">Ha ocurrido un error: @Error</MudAlert>
                    }
                </div>
                <MudCard>
                    <MudCardContent>
                        <MudSelect @bind-Value="aiConnection.DatabaseType"
                                   Label="Tipo de Base de Datos">
                            <MudSelectItem Value="@("MSSQL")" T="string">MSSQL</MudSelectItem>
                        </MudSelect>
                        <MudTextField @bind-Value="aiConnection.Name" T="string" Label="Nombre de la conexión" Variant="Variant.Text" />
                        <MudTextField @bind-Value="aiConnection.ConnectionString" T="string" Label="Connection string" Variant="Variant.Text" Lines="5" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Chequear conexión</MudButton>
                    </MudCardActions>
                </MudCard>
                @if (dbSchema.SchemaStructured.Count > 0)
                {
                    <MudCard Class="my-6">
                        <MudCardContent>
                            <p>
                                Se encontraron las siguientes tablas y columnas. ¿Desea guardar esta conexión?
                                <MudButton Style="float:right" OnClick="() => SaveConnection()" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Guardar</MudButton>
                            </p>
                            <div Class="my-6">
                                <MudTreeView T="string">
                                    @foreach (var table in dbSchema.SchemaStructured)
                                    {
                                        <MudTreeViewItem Value="@table.TableName">
                                            @foreach (var col in table.Columns)
                                            {
                                                <MudTreeViewItem Value="@col" />
                                            }
                                        </MudTreeViewItem>
                                    }
                                </MudTreeView>
                            </div>
                        </MudCardContent>
                    </MudCard>
                }
            </MudItem>
            <MudItem xs="12" md="6">
                <h2 Class="mb-6 ml-6">Conexiones Existentes</h2>
                @if (ExistingDbs.Count > 0)
                {
                    <MudPaper MaxWidth="100%" Class="my-6">

                        <MudList Clickable="false">
                            @foreach (var item in ExistingDbs)
                            {
                                <MudListItem><span>@item.Name </span><MudIconButton Style="float: right" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteConnection(item.Name!)" Size="Size.Small" Variant="Variant.Filled" Color="Color.Secondary">Borrar</MudIconButton></MudListItem>
                            }
                            @if(Deleting)
                            {
                                <p>Borrando... <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" /></p>
                            }
                        </MudList>
                    </MudPaper>

                }
                else
                {
                    <p class="ma-6">No hay conexiones todavía.</p>
                }
            </MudItem>
        </MudGrid>
    </EditForm>
</div>
@code {
    AIConnection aiConnection = new();
    DatabaseSchema dbSchema = new() { SchemaStructured = new List<TableSchema>(), SchemaRaw = new List<string>() };
    List<AIConnection> ExistingDbs = new List<AIConnection>();

    string Error = String.Empty;
    private bool Deleting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ExistingDbs = await connectionService.GetAIConnections();
        }
        catch (Exception e)
        {
            var test = e.Message;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            dbSchema = await dataService.GenerateSchema(aiConnection);
            Error = String.Empty;
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }

    private async Task DeleteConnection(string name)
    {
        ExistingDbs = await connectionService.GetAIConnections();

        try
        { 
            Deleting = true;
            var task = connectionService.DeleteConnection(name);
            Deleting = false;
            Error = String.Empty;
            
            // Delete operation can take a while with some secure storage so we just update the UI manually
            var removeEntry = ExistingDbs.First(x => x.Name == name);
            ExistingDbs.Remove(removeEntry);
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }

    private async Task SaveConnection()
    {
        try
        {
            await connectionService.AddConnection(aiConnection);
            ExistingDbs = await connectionService.GetAIConnections();
            aiConnection = new();
            dbSchema = new() { SchemaStructured = new List<TableSchema>(), SchemaRaw = new List<string>() };
            Error = String.Empty;
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }
}